# A set that can be drawn from quickly
#
# Copyright (C) 2021 Simon Dobson
#
# This file is part of epydemic, epidemic network simulations in Python.
#
# epydemic is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# epydemic is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with epydemic. If not, see <http://www.gnu.org/licenses/gpl.html>.

from epydemic import Element
from typing import Any, Set, List, Tuple, Iterable
import numpy


class Bitstream(object):
    '''An infinite stream of random bits. The bits are generated from a
    random number generated by the generator in `numpy` and consumed bitwise.

    :param size: (optional) size of the entropy pool in words'''

    # Underlying types
    Dtype = numpy.int64                        #: Type ufor elements of the entropy pool.
    DtypeSize = 63                             #: Bits per element (excluding sign).

    def __init__(self, size : int =100):
        self._rng = numpy.random.default_rng()

        self._pool: List[int] = []                      # entropy pool
        self._size = size                               # size of the pool
        self._max : int = 2 ** self.DtypeSize -1        # maximum value of an entry in the pool
        self._element : int = 0                         # current element from the pool
        self._nelement : int = 0                        # index of current element
        self._index : int = 0                           # current bit within the element
        self._mask : int = 1                            # bit-mask

        self._refill()

    def _refill(self):
        '''Re-fill the entropy pool. This creates another batch of random numbers
        to be drawn from.'''
        self._pool = self._rng.integers(self._max, size=self._size, dtype=self.Dtype)
        self._nElement = 0
        self._element = int(self._pool[0])

    def __iter__(self) -> Iterable[int]:
        '''Return an iterator of bits.

        :retruns: an iterator'''
        return self

    def __next__(self) -> int:
        '''Return a random bit.

        :returns: a random bit'''
        bit = (self._element & self._mask) >> self._index
        self._index += 1
        self._mask <<= 1
        if self._index == self.DtypeSize:
            self._nElement += 1
            if self._nElement == self._size:
                self._refill()
            else:
                self._element = int(self._pool[self._nElement])
            self._index = 0
            self._mask = 1
        return bit

    def integer(self, n : int):
        '''Return a random integer. The integer is constructed using bits
        from the generator.

        :param n: the limit
        :returns: a random integer on the range [0, n]'''
        v = 0
        m = 1
        while True:
            m <<= 1
            if m >= n:
                return v
            else:
                v <<= 1
                v += next(self)


class TreeNode(object):
    '''A node in an AVL tree.

    :param d: the data at the tree node
    :param p: (optional) the parent node (defaults to None)

    '''

    def __init__(self, d: Element, p: 'TreeNode' = None):
        self._left: 'TreeNode' = None    # left sub-tree
        self._right: 'TreeNode' = None   # right sub-tree
        self._parent: 'TreeNode' = p     # parent nodes
        self._data: Element = d          # value at this node
        self._height: int = 0            # height of the sub-tree rooted here

    def __len__(self) -> int:
        s = 1
        if self._left is not None:
            s += len(self._left)
        if self._right is not None:
            s += len(self._right)
        return s

    def _add(self, e: Element) -> 'TreeNode':
        if e == self._data:
            return None
        elif e < self._data:
            if self._left is None:
                self._left = TreeNode(e, self)
                self._updateHeights()
                return self._left._rebalance()
            else:
                return self._left._add(e)
        else:
            if self._right is None:
                self._right = TreeNode(e, self)
                self._updateHeights()
                return self._right._rebalance()
            else:
                return self._right._add(e)

    def _updateHeights(self):
        '''Walk back to the root updating the heights of nodes.'''
        if self._updateHeight() and self._parent is not None:
            self._parent._updateHeights()

    def _updateHeight(self) -> bool:
        '''Update the node height.'''
        lh = self._left._height + 1 if self._left is not None else 0
        rh = self._right._height + 1 if self._right is not None else 0

        h = max(lh, rh)
        if h != self._height:
            self._height = h
            return True
        else:
            return False

    def _findUnbalanced(self) -> ('TreeNode', 'TreeNode', 'TreeNode'):
        '''Walk back up the tree looking for the shallowest unbalanced
        node.'''
        lh = self._left._height + 1 if self._left is not None else 0
        rh = self._right._height + 1 if self._right is not None else 0

        if abs(lh - rh) > 1:
            return (self, None, None)
        elif self._parent is None:
            return (None, None, None)
        else:
            (z, y, x) = self._parent._findUnbalanced()
            if z is None:
                return (None, None, None)
            elif y is None:
                return (z, self, None)
            elif x is None:
                return (z, y, self)
            else:
                return (z, y, x)

    def _rebalance(self, recursive:bool = False) -> 'TreeNode':
        '''Rebalance the tree after addition of a node.'''

        # find the shallowest unbalanced node
        (z, y, x) = self._findUnbalanced()
        if z is None:
            # tree is balanced all the way up
            return None
        if x is None:
            # a shallow tree, we are x
            x = self

        # perform the appropriate rotation
        parent = z._parent
        if y._data > z._data:
            if x._data > y._data:
                print('a-b-c')
                root = y
                y._parent = parent
                z._right = y._left
                if y._left is not None:
                    y._left._parent = z
                y._left = z
                z._parent = y
                z._updateHeight()
                y._updateHeight()
            else:
                print('a-c-b')
                root = x
                x._parent = parent
                y._left = x._right
                if x._right is not None:
                    x._right._parent = y
                z._right = x._left
                if x._left is not None:
                    x._left._parent = z
                x._left = z
                z._parent = x
                x._right = y
                y._parent = x
                z._updateHeight()
                y._updateHeight()
                x._updateHeight()
        else:
            if x._data > y._data:
                print('c-a-b')
                root = x
                x._parent = parent
                y._right = x._left
                if x._left is not None:
                    x._left._parent = y
                z._left = x._right
                if x._right is not None:
                    x._right._parent = z
                x._left = y
                y._parent = x
                x._right = z
                z._parent = x
                z._updateHeight()
                y._updateHeight()
                x._updateHeight()
            else:
                print('c-b-a')
                root = y
                y._parent = parent
                z._left = y._right
                if y._right is not None:
                    y._right._parent = z
                y._left = x
                x._parent = y
                y._right = z
                z._parent = y
                z._updateHeight()
                y._updateHeight()

        if parent is not None:
            # glue new local root into the parent in place of z,
            # the old root
            if parent._left == z:
                parent._left = root
            else:
                parent._right = root

            # update the heights back up to the root
            parent._updateHeights()

            if recursive:
                # we're recursing, so call again on our parent
                return parent._rebalance(True)
            else:
                # we're not recursing and the global root of the tree is unchanged
                return None
        else:
            # tree has a new global root, return it
            return root

    def _find(self, e: Element) -> 'TreeNode':
        '''Private method to search for an element.

        :param e: the element
        :returns: the node holding the element or None'''
        if e == self._data:
            return self
        elif e < self._data:
            return self._left._find(e)
        else:
            return self._right._find(e)

    def inOrderTraverse(self) -> List[Element]:
        es = []
        if self._left is not None:
            es.extend(self._left.inOrderTraverse())
        es.append(self._data)
        if self._right is not None:
            es.extend(self._right.inOrderTraverse())
        return es

    def _leftmost(self) -> 'TreeNode':
        '''Return the leftmost node in a tree.'''
        if self._left is None:
            return self
        else:
            return self._left._leftmost()

    def _rightmost(self) -> 'TreeNode':
        '''Return the rightmost node in a tree.'''
        if self._right is None:
            return self
        else:
            return self._right._leftmost()

    def _deepest(self) -> 'TreeNode':
        '''Return the deepest node in a sub-tree.'''
        lh = self._left._height + 1 if self._left is not None else 0
        rh = self._right._height + 1 if self._right is not None else 0
        if lh == 0 and rh == 0:
            return self
        elif lh > rh:
            return self._left._deepest()
        else:
            return self._right._deepest()

    def _discard(self, e) -> Tuple[bool, 'TreeNode']:
        '''Delete the given element from the tree, if it is present.'''
        if e == self._data:
            if self._left is None:
                if self._right is None:
                    # leaf node, can be deleted immediately
                    print('leaf')
                    if self._parent is None:
                        # we're the last node in the tree
                        return (True, None)
                    else:
                        # delete from parent
                        if self._parent._left == self:
                            self._parent._left = None
                            self._parent._updateHeights()
                            if self._parent._right is not None:
                                return (False, self._parent._right._deepest()._rebalance(True))
                        else:
                            self._parent._right = None
                            self._parent._updateHeights()
                            if self._parent._left is not None:
                                return (False, self._parent._left._deepest()._rebalance(True))
                        return (False, None)
                else:
                    print('right sub-tree only')
                    # only a right sub-tree, slide up to replace
                    if self._parent is None:
                        # we're the root, replace us
                        self._right._parent = None
                        return (None, self._right)
                    else:
                        # replace us with our sub-tree
                        if self._parent._left == self:
                            self._parent._left = self._right
                            self._right._parent = self._parent
                            self._parent._updateHeights()
                            return (False, self._parent._right._deepest()._rebalance(True))
                        else:
                            self._parent._right = self._right
                            self._right._parent = self._parent
                            self._parent._updateHeights()
                            return (False, self._parent._right._deepest()._rebalance(True))
            elif self._right is None:
                print('left sub-tree only')
                # only a left sub-tree, slide up to replace
                if self._parent is None:
                    # we're the root, replace us
                    self._left._parent = None
                    return (None, self._left)
                else:
                    # replace us with our sub-tree
                    if self._parent._left == self:
                        self._parent._left = self._left
                        self._left._parent = self._parent
                        self._parent._updateHeights()
                        return (False, self._parent._left._deepest()._rebalance(True))
                    else:
                        self._parent._right = self._left
                        self._left._parent = self._parent
                        self._parent._updateHeights()
                        return (False, self._parent._left._deepest()._rebalance(True))
            else:
                print('two sub-trees')
                # two sub-trees, choose the largest-smaller as a replacement
                r = self._left._rightmost()
                d = r._data

                # discard the element (which will be a leaf or have only one sub-tree)
                self._left._discard(d)

                # replace our data with that discarded
                self._data = d

                # re-balance on the right
                if self._right is not None:
                    self._right._deepest()._rebalance(True)

                # this operation can't change the root or empty the tree
                return (False, None)

        elif e < self._data:
            if self._left is None:
                return (False, None)
            else:
                return self._left._discard(e)
        else:
            if self._right is None:
                return (False, None)
            else:
                return self._right._discard(e)

    def __repr__(self) -> str:
        d = str(self._data)
        ld = str(self._left._data) if self._left is not None else ''
        rd = str(self._right._data) if self._right is not None else ''
        buf = f'{d}: {ld} {rd}\n'
        if self._left is not None:
            buf += str(self._left)
        if self._right is not None:
            buf += str(self._right)
        return buf


class DrawableSet(object):
    '''A set that can be drawn from randomly.

    The implementation uses an balanced binary search tree. Addition,
    deletion, and containment testing are all :math:`O(\log n)`
    average time complexity, as is the :meth:`draw` method that
    selects a uniformly random element.

    We don't implement the whole of the standard set interface as we
    don't need it for the current application. Possibly we ought to,
    just to be future-proof.

    '''

    # Supporting source of random bits
    Bitstream = Bitstream()   #: A random bit stream generator.


    def __init__(self):
        self._root = None

    def add(self, e: Element):
        '''Add an element to the set. This is a no-op if the element is already
        in the set.

        :param e: the element to add'''
        if self._root is None:
            # we're the root, store here
            self._root = TreeNode(e)
        else:
            r = self._root._add(e)
            if r is not None:
                # the tree was rotated about the root
                self._root = r

    def __contains__(self, e: Element) -> bool:
        '''Check whether the given element is a member of the set.

        :param e: the element
        :returns: True if the element is in the set'''
        if self._root is None:
            return False
        else:
            return self._root._find(e) is not None

    def empty(self) -> bool:
        '''Test if the set is empty.

        :returns: True if the set is empty'''
        return self._root is None

    def __len__(self) -> int:
        '''Return the size of the set.

        :returns: the size of the set'''
        if self._root is None:
            return 0
        else:
            return len(self._root)

    def __repr__(self) -> str:
        if self._root is None:
            return '()'
        else:
            return str(self._root)

    def __iter__(self):
        '''Return an iterator over the set.

        :returns: an iterator'''
        visit = []
        es = []
        n = self._root
        while True:
            while n is not None:
                visit.append(n)
                n = n._left
            if len(visit) == 0:
                break
            n = visit.pop()
            es.append(n._data)
            n = n._right
        return iter(es)

    def elements(self) ->List[Element]:
        if self._root is None:
            return []
        else:
            return self._root.inOrderTraverse()

    def discard(self, e: Element):
        '''Discard the given element from the set. If the element
        isn't in the set, this is a no-op.

        :param e: the element'''
        if self._root is not None:
            (empty, r) = self._root._discard(e)
            if empty:
                # tree has been emptied
                self._root = None
            elif r is not None:
                # the tree was rotated about the root
                self._root = r

    def draw(self) -> Element:
        '''Draw an element from the set at random.

        :returns: a random element, or none if the set is empty'''
        pathlength = self.Bitstream.integer(self._height)
        n = self
        bits = iter(self.Bitstream)
        for _ in range(pathlength):
            b = next(bits)
            if b == 0:
                n = n._left
            else:
                n = n._right
            if n is None:
                n = self
        return n._data
